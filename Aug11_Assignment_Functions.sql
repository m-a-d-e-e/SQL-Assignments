--FUNCTIONS
--1.	TAKE PRODUCTNAME AS PARAMETER AND RETURN UNITPRICE

CREATE FUNCTION UNITPRICEFUNC(@PNAME VARCHAR(20))
RETURNS MONEY
AS
BEGIN
      DECLARE @UPRICE MONEY
	  SELECT @UPRICE=UNITPRICE FROM PRODUCTS WHERE PRODUCTNAME = @PNAME
	  RETURN @UPRICE
END

SELECT DBO.UNITPRICEFUNC('TOFU') 


--2.	TAKE PRODUCTNAME AS PARAMETER AND RETURN UNITSINSTOCK AND UNINTSONORDER

CREATE FUNCTION STOCKORDERFUNC(@PNAME VARCHAR(20))
RETURNS TABLE
AS
	  RETURN (SELECT UNITSINSTOCK, UNITSONORDER FROM PRODUCTS WHERE PRODUCTNAME = @PNAME) 
	  
SELECT * FROM DBO.STOCKORDERFUNC('TOFU') 
 

--3.	TAKE POSTALCODE AS PARAMETER AND RETURN CUSTOMER NAME. IF POSTAL CODE IS NOT VALID DISPLAY ERROR MESSAGE

ALTER FUNCTION CUST(@POSTALCODE NVARCHAR(20))
RETURNS NVARCHAR(80)
AS
BEGIN
      DECLARE @CNAME VARCHAR(80) 
      SELECT @CNAME=COMPANYNAME FROM CUSTOMERS WHERE POSTALCODE=@POSTALCODE
	  IF(@@ROWCOUNT=0)
	  BEGIN
	        SET @CNAME =  'ERROR --- INVALID POSTAL CODE'
	  END
	  RETURN @CNAME
END

SELECT DBO.CUST('05021')
SELECT DBO.CUST('050')



--4.	TAKE COUNTRY AS PARAMETER AND RETURN CITY AND POSTALCODE FOR A CUSTOMERS

CREATE FUNCTION COUNTRYFUNC(@COUNTRY VARCHAR(30))
RETURNS TABLE
AS
     RETURN (SELECT CITY,POSTALCODE FROM CUSTOMERS WHERE COUNTRY=@COUNTRY)


SELECT * FROM DBO.COUNTRYFUNC('USA')


--5.	TAKE EMPLOYEE FIRSTNAME AND LASTNAME AS PARAMETER AND RETURN ALL CUSTOMERS COMPANY NAME,  CONTACTNAME, CONTACTTILE

CREATE FUNCTION EMPFUNC(@FNAME VARCHAR(20), @LNAME VARCHAR(40))
RETURNS TABLE
AS
     RETURN (SELECT COMPANYNAME, CONTACTNAME, CONTACTTITLE FROM CUSTOMERS WHERE CUSTOMERID IN 
	                                    (SELECT CUSTOMERID FROM ORDERS WHERE EMPLOYEEID IN
										(SELECT EMPLOYEEID FROM EMPLOYEES WHERE FIRSTNAME=@FNAME AND LASTNAME=@LNAME)))


SELECT * FROM DBO.EMPFUNC ('ANDREW','FULLER')



SELECT * FROM Customers
SELECT * FROM EMPLOYEES
SELECT DISTINCT CustomerID FROM ORDERS WHERE EmployeeID=2



--6.	TAKE YEAR AND EMPLOYEENAME AND DISPLAY AMOUNT OF ORDERS HANDLE  BY THE EMPLOYEE IN A YEAR  (SUM OF QUANTITY)

CREATE FUNCTION EMPORDERS (@ENAME VARCHAR(40), @YR INT)
RETURNS INT
AS
BEGIN
     RETURN (SELECT SUM(QUANTITY) FROM [Order Details] WHERE ORDERID IN 
	                                              (SELECT ORDERID FROM ORDERS WHERE DATEPART(YYYY,ORDERDATE)=@YR AND EMPLOYEEID IN
												  (SELECT EMPLOYEEID FROM EMPLOYEES WHERE (FIRSTNAME+' '+LASTNAME)=@ENAME)))
END


SELECT DBO.EMPORDERS('ANDREW FULLER',1996)



SELECT * FROM EMPLOYEES 
SP_HELP'[Order Details]'
SELECT * FROM ORDERS 
SELECT * FROM [Order Details]



--7.	TAKE YEAR AND MONTH AS PARAMETER AND RETURN NO OF ORDERS SHIPPED IN THE GIVEN MONTH

CREATE FUNCTION ORDERSSHIPPED (@YR INT, @MNTH VARCHAR(10))
RETURNS INT
AS
BEGIN
       RETURN (SELECT COUNT(ORDERID) FROM ORDERS WHERE DATEPART(YYYY,SHIPPEDDATE)=@YR AND DATENAME(MM,SHIPPEDDATE)=@MNTH)
END


SELECT DBO.ORDERSSHIPPED(1996,'AUGUST') 



--8.	TAKE PRODUCTNAME AS PARAMTER AND RETURN TOTLA UNITS OF ORDER PLACED FOR THE PRODUCT (SUM(ORDERED QUANTITY)
--Hint: use Products and [Order Details] table

CREATE FUNCTION TOTALUNITS (@PNAME VARCHAR(20))
RETURNS INT
AS
BEGIN
     RETURN (SELECT SUM(QUANTITY) FROM [Order Details] WHERE PRODUCTID IN (SELECT PRODUCTID FROM PRODUCTS WHERE PRODUCTNAME=@PNAME))
END

SELECT DBO.TOTALUNITS('CHAI')

SELECT * FROM PRODUCTS
SELECT SUM(Quantity) FROM [Order Details] WHERE PRODUCTID=1



--9.       TAKE ORDERID AS PARAMETER AND RETURN TOTAL UNITS OF ORDER PLACE FOR THE ORDERID

CREATE FUNCTION TOTALUNITSORDER (@OID INT)
RETURNS INT
AS
BEGIN
     RETURN (SELECT SUM(QUANTITY) FROM [ORDER DETAILS] WHERE ORDERID = @OID)
END

SELECT DBO.TOTALUNITSORDER(10248)



SELECT * FROM [ORDER DETAILS]
