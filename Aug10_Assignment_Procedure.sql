--NORTHWIND DATABASE – PROGRAMMING ASSIGNMENT
--1.	WRITE A PROCEDURE WHICH TAKES CATEGORY NAME AS A PARAMETER AND RETURN ALL PRODUCTS WHICH MATCH WITH THE CATEGORY NAME. IF NAME NOT EXIST PRINT MESSAGE

ALTER PROCEDURE CAT(@CATNAME VARCHAR(20))
AS
BEGIN
     IF EXISTS (SELECT * FROM PRODUCTS WHERE CATEGORYID IN (SELECT CATEGORYID FROM CATEGORIES WHERE CATEGORYNAME = @CATNAME))
	 BEGIN
	     SELECT * FROM PRODUCTS WHERE CATEGORYID IN (SELECT CATEGORYID FROM CATEGORIES WHERE CATEGORYNAME = @CATNAME)
	 END
	 ELSE
	 BEGIN
	      DECLARE @MSG VARCHAR(50)
		  SET @MSG = CONCAT('NO RECORDS FOR CATEGORY ', @CATNAME, ' FOUND !')
	      RAISERROR (@MSG ,16,1)
	 END
END

EXEC CAT 'SEAFOOD'
EXEC CAT 'AHJH'



--2.	TAKE COUNTRY NAME AS THE PARAMETER AND RETURN ALL CUSTOMERS FROM THAT COUNTRY

ALTER PROCEDURE CUSTCOUNTRY(@CNAME VARCHAR(20))
AS
BEGIN
     SELECT * FROM CUSTOMERS WHERE COUNTRY = @CNAME
END

EXEC CUSTCOUNTRY 'UK'


--3.       WRITE INSERT, UPDATE AND DELETE PROCEDURE FOR EMPLOYEES TABLE. IF ANY STATEMENT FAIL RAISE PROPER ERROR MESSAGE
--PARAMETER : EMPLOYEEID         LASTNAME         FIRSTNAME        TITLE      TITLEOFCOURTESY           BIRTHDATE                HIREDATE            ADDRESS             CITY       REGION                POSTALCODE     COUNTRY

ALTER PROCEDURE INSEMP(@LNAME VARCHAR(20), @FNAME VARCHAR(20), @TITILE VARCHAR(20), @TOC VARCHAR, @BDATE DATETIME, @HDATE DATETIME, @ADDR VARCHAR(30), @CITY VARCHAR(20), @REGION VARCHAR(20), @PCODE VARCHAR(30), @COUNTRY VARCHAR(30) )
AS
BEGIN
     INSERT INTO Employees (LASTNAME,FIRSTNAME,TITLE,TITLEOFCOURTESY,BIRTHDATE,HIREDATE,ADDRESS,CITY,REGION,POSTALCODE,COUNTRY) 
	 VALUES (@LNAME,@FNAME,@TITILE,@TOC,@BDATE,@HDATE,@ADDR,@CITY,@REGION,@PCODE,@COUNTRY)
	 IF @@ROWCOUNT=0
	 BEGIN
		 RAISERROR ('INSERT FAILED',16,1) 
	 END
END

EXEC INSEMP 'TOM', 'JERRY', 'MANAGER', 'MR', '2000-09-09', '2021-01-17', 'MUMBAI INDIA', 'MUM', 'WEST', '400001', 'INDIA'

--------

ALTER PROCEDURE UPDEMP (@EID INT,@LNAME VARCHAR(20), @FNAME VARCHAR(20), @TITILE VARCHAR(20), @TOC VARCHAR, @BDATE DATETIME, @HDATE DATETIME, @ADDR VARCHAR(30), @CITY VARCHAR(20), @REGION VARCHAR(20), @PCODE VARCHAR(30), @COUNTRY VARCHAR(30) )
AS
BEGIN
      UPDATE EMPLOYEES SET LASTNAME=@LNAME, FIRSTNAME=@FNAME, TITLE=@TITILE, TITLEOFCOURTESY=@TOC, BIRTHDATE=@BDATE, HIREDATE=@HDATE, ADDRESS=@ADDR, CITY=@CITY, REGION=@REGION, POSTALCODE=@PCODE, COUNTRY=@COUNTRY
      WHERE EMPLOYEEID = @EID
	  IF @@ROWCOUNT = 0
	  BEGIN
		 RAISERROR ('INVALID EMP ID',16,1)
	 END 
END

EXEC UPDEMP 11 ,'TOM', 'JERRY', 'MANAGER', 'MR', '2000-09-09', '2021-01-17', 'MUMBAI INDIA', 'MUM', 'WEST', '400001', 'INDIA'
EXEC UPDEMP 10 ,'TOMMYYYY', 'JERRY', 'MANAGER', 'MR', '2000-09-09', '2021-01-17', 'MUMBAI INDIA', 'MUM', 'WEST', '400001', 'INDIA'


-----

ALTER PROCEDURE DELEMP (@EID INT)
AS
BEGIN
     DELETE FROM EMPLOYEES WHERE EMPLOYEEID = @eid
	 IF @@ROWCOUNT = 0
	 BEGIN
	    RAISERROR ('NO RECORDS TO DELETE',16,1)
	 END 
END

EXEC DELEMP 10
EXEC DELEMP 11



SP_HELP'EMPLOYEES'

SELECT * FROM Employees



--4.       TAKE REGIONDESCRIPTION AS A PARAMETER
--PRINT REGIONDESCRIPTION,  TERRITORY DESCRIPTION, AND EMPNAME

ALTER PROCEDURE REG(@RDESC VARCHAR(20))
AS
BEGIN
    SELECT R.REGIONDESCRIPTION, T.TERRITORYDESCRIPTION, (E.FIRSTNAME + E.LASTNAME) AS EMPNAME
	FROM REGION R
	LEFT JOIN TERRITORIES T
	ON R.REGIONID = T.REGIONID
	LEFT JOIN EMPLOYEETERRITORIES ET
	ON T.TERRITORYID = ET.TERRITORYID
	LEFT JOIN EMPLOYEES E
	ON ET.EMPLOYEEID=E.EMPLOYEEID 
END

EXEC REG 'EASTERN'

SELECT * FROM Region


--5.       PRODUCTS TABLE
--WRITE A PROCEDURE WHICH CHECKS UNITSINSTOCK AND UNITSONORDER
--DISPLAY ALL PRODUCTS DETAILS (PRODUCTNAME, UNITPRICE, UNITSINSTOCK, UNITSONORDER, DIFFERENCE )  where UNITSONORDER is more then UNITSINSTOCK

CREATE PROCEDURE CHECKSTCK
AS
BEGIN
     SELECT PRODUCTNAME, UNITPRICE, UNITSINSTOCK, UNITSONORDER, (UNITSONORDER - UNITSINSTOCK) AS DIFFERENCE FROM PRODUCTS WHERE UNITSONORDER > UNITSINSTOCK
END

EXEC CHECKSTCK
SELECT * FROM PRODUCTS


--6.       ORDER DETAILS TABLE
--TAKE ORDERID AS PARAMETER
--FOR THE ORDERID PRINT PRODUCTNAME, UNITPRICE, QUANTITY, DISCOUNT, TOTAL I.E UNITPRICE * QUNATITY, DISCOUNTAMOUNT, FINAL PRICE I.E. TOTAL – DISCOUNT AMOUNT

ALTER PROCEDURE ORDERPROC (@OID INT)
AS
BEGIN
      SELECT PRODUCTNAME, O.UNITPRICE, QUANTITY, DISCOUNT, (O.UNITPRICE*QUANTITY) AS TOTAL, DISCOUNT, ((O.UNITPRICE*QUANTITY)-DISCOUNT) AS FINALPRICE
	  FROM [ORDER DETAILS] O
	  LEFT JOIN PRODUCTS P
	  ON O.PRODUCTID = P.PRODUCTID
	  WHERE O.ORDERID = @OID
END

EXEC ORDERPROC 10248

SELECT * FROM [Order Details]
SELECT * FROM PRODUCTS



--7.       WRITE A PROCEDURE WHICH INSERT IN PRODUCTTABLE
--PARAMETER FOR PROCEDURE PRODUCTNAME, UNITPRICE AND CATEGORYNAME
--CHECK IF CATEGORYNAME EXIST THEN ADD PRODUCTS WITH EXISTING CATEGORYID
--IF CATEGORYNAME DOES NOT EXIST FIRST INSERT IN CATEGORY TABLE
--READ CATEGORYID WHICH IS IDENTITY FIELD
--AND INSERT NEW INSERTED ID IN PRODUCT TABLE AS CATEGORYID

CREATE PROCEDURE INSERTPRODUCT (@PNAME VARCHAR(20), @UPRICE MONEY, @CATNAME VARCHAR(20))
AS
BEGIN
       DECLARE @CATID INT

       IF EXISTS (SELECT CATEGORYNAME FROM CATEGORIES WHERE CATEGORYNAME=@CATNAME)
	   BEGIN
			SELECT @CATID=CATEGORYID FROM CATEGORIES WHERE CATEGORYNAME = @CATNAME
	        INSERT INTO PRODUCTS (PRODUCTNAME,UNITPRICE,CATEGORYID) VALUES(@PNAME,@UPRICE,@CATID)
	   END
	   ELSE
	   BEGIN
	        INSERT INTO CATEGORIES (CATEGORYNAME) VALUES (@CATNAME)
				
			SELECT @CATID=CATEGORYID FROM CATEGORIES WHERE CATEGORYNAME = @CATNAME
	        INSERT INTO PRODUCTS (PRODUCTNAME,UNITPRICE,CATEGORYID) VALUES(@PNAME,@UPRICE,@CATID)
	   END
END 

EXEC INSERTPRODUCT 'GREENTEA', 12.0, 'BEVERAGES'
EXEC INSERTPRODUCT 'CHOCO ICECREAM', 20.2, 'ICECREAM'

SELECT * FROM PRODUCTS
SELECT * FROM CATEGORIES
SP_HELP 'PRODUCTS'
SP_HELP 'CATEGORIES'



--8.       ORDERS TABLE
--TAKE YEAR AS PARAMETER TO PROCEDURE
--PRINT IN EACH QUARTER HOW MANY ORDERS BOOKED, 
--EXAMPLE IN Q-1 100
--           Q-2 150 ….

ALTER PROCEDURE ORDERQUARTER (@YR INT)
AS
BEGIN
     DECLARE @Q1 INT, @Q2 INT, @Q3 INT, @Q4 INT

	 SELECT @Q1 = COUNT(ORDERID) FROM ORDERS WHERE DATEPART(YYYY,ORDERDATE) = @YR AND DATEPART(QQ,ORDERDATE) = 1
	 SELECT @Q2 = COUNT(ORDERID) FROM ORDERS WHERE DATEPART(YYYY,ORDERDATE) = @YR AND DATEPART(QQ,ORDERDATE) = 2
	 SELECT @Q3 = COUNT(ORDERID) FROM ORDERS WHERE DATEPART(YYYY,ORDERDATE) = @YR AND DATEPART(QQ,ORDERDATE) = 3
	 SELECT @Q4 = COUNT(ORDERID) FROM ORDERS WHERE DATEPART(YYYY,ORDERDATE) = @YR AND DATEPART(QQ,ORDERDATE) = 4

	 PRINT 'Q-1 '  + CAST(@Q1 AS VARCHAR)
     PRINT 'Q-2 '  + CAST(@Q2 AS VARCHAR)
     PRINT 'Q-3 '  + CAST(@Q3 AS VARCHAR)
     PRINT 'Q-4 '  + CAST(@Q4 AS VARCHAR) 
END

EXEC ORDERQUARTER 1996

SELECT * FROM ORDERS WHERE DATEPART(YYYY,ORDERDATE) = 1996
SP_HELP 'ORDERS'



--IF YEAR NOT EXIST PRINT ERROR MESSAGE
--9.       TABLE ORDERS AND ORDER DETAILS – OUT PARAMETER
--TAKE YEAR AND MONTH AS PARAMETER AND RETURN
--TOTAL REVENUE GENERATED SUM(UNITPRICE * QTY – DISCOUNT)


ALTER PROC REVN(@YR INT, @MNTH INT)
AS
BEGIN
        IF EXISTS(SELECT DATEPART(YYYY,ORDERDATE) FROM ORDERS WHERE DATEPART(YYYY,ORDERDATE)=@YR )
		BEGIN
			SELECT SUM ((OD.UNITPRICE*OD.QUANTITY)- OD.DISCOUNT) AS REVENUE 
			FROM [Order Details] OD
			LEFT JOIN ORDERS O
			ON OD.ORDERID = O.ORDERID
			WHERE DATEPART(YYYY,ORDERDATE)=@YR AND DATEPART(MM,ORDERDATE)=@MNTH
		END
		ELSE
		BEGIN
		     RAISERROR ('INVALID YEAR',16,1)
		END
END

EXEC REVN 1996, 7

SELECT * FROM ORDERS
SELECT * FROM [Order Details]



--10.   FOR EACH EMPLOYEE PRINT EMPLOYEE FULL NAME, BIRTHDATE, HIREDATE, AGE (IN YEARS) AT THE TIME OF HIRING, RETIREMENT DATE. (60 YEARS)

CREATE PROCEDURE EMPDETAILS
AS
BEGIN
     SELECT (FIRSTNAME+' '+LASTNAME)AS EMPNAME, BIRTHDATE, HIREDATE, DATEDIFF(YY,BIRTHDATE,HIREDATE) AS AGE,  DATEADD(YYYY,60,BIRTHDATE) AS RETIREMENTDATE
	 FROM EMPLOYEES
END

SELECT * FROM Employees


--11
--TAKE DEPTNO FROM USER AND PRINT ALL THE NAME OF EMP COMMA SEPARTED
--IF DEPTNO NOT PROVIDED DISPLAY ALL EMP NAME COMMA SEPARATED FROM TABLE

USE TRAINING

ALTER PROC ALLEMP (@DNO INT, @LIST VARCHAR(200) OUT) AS
BEGIN
      DECLARE @NAME VARCHAR(20)
      DECLARE NAMECURSOR CURSOR FOR (SELECT ENAME FROM EMP WHERE DEPTNO=@DNO)
	  OPEN NAMECURSOR 
	  SET @LIST=''
	  FETCH NEXT FROM NAMECURSOR INTO @NAME
	  WHILE @@FETCH_STATUS = 0
	  BEGIN
	       SELECT @LIST = CONCAT(@LIST, @NAME, ',')
		   FETCH NEXT FROM NAMECURSOR INTO @NAME
	  END
	  CLOSE NAMECURSOR
	  DEALLOCATE NAMECURSOR
	  PRINT @LIST
END


DECLARE @LISTNAME VARCHAR(200)
EXEC ALLEMP 20, @LISTNAME OUT

